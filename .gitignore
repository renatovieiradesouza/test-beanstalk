# Java
*.class
*.log
*.ctxt
hs_err_pid*
replay_pid*
*.hprof

# Maven
target/
!.mvn/wrapper/maven-wrapper.jar

# Gradle
.gradle/
build/

# IDEs / Editors
.idea/
*.iml
*.ipr
*.iws
.vscode/
.project
.classpath
.settings/
bin/
out/

# OS
.DS_Store
Thumbs.db

# Archives / Artifacts (donâ€™t commit build outputs)
*.zip
*.tar
*.tar.gz
*.gz
*.jar
*.war
ebpkg/ROOT.war
war/target/

# Terraform
.terraform/
terraform.tfstate
terraform.tfstate.*
crash.log
crash.*.log
*.tfvars
*.tfvars.json
override.tf
override.tf.json
*_override.tf
*_override.tf.json
.terraformrc
terraform.rc

# Env / secrets (if any used locally)
.env
.env.*

# Temp logs/extractions
var/
logs/
logs-*/
BundleLogs*.zip
# Created by https://www.toptal.com/developers/gitignore/api/terraform
# Edit at https://www.toptal.com/developers/gitignore?templates=terraform

### Terraform ###
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# End of https://www.toptal.com/developers/gitignore/api/terraform

